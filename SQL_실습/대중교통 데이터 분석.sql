-- <<대중교통데이터분석>>
/*
참고 내용
TK(TAKE) == 승차
GFF(GET OFF) == 하차
한 시간당 승차 & 하차 정보가 기입되어 있다. => 하루에 48개의 승하차 정보가 기입되어 있다.
집계 기준이 컬럼에 들어가 있기 때문에 멜팅 작업, 즉 코드화가 필요하다. => CASE WHEN THEN 구문으로 LV1~48 코드화 가능
(일반 개발자는 CASE WHEN THEN을 조건을 넣기 위한 용도로만 사용하고 이렇게 사용하진 않지만, 데이터 분석에서 분석 용이하게 하기 위해 이렇게 코드화 적용하는 것)
엔지니어라면 데이터의 리소스(메모리)까지 고려를 해야 한다. 예를 들어 100만건 중 20건이 0인 결과라면, WHERE절로 필터링하는게 좋다. (집계에 참여하지 않는 데이터를 필터링 == 방어코드)
원본 데이터는 절대 건드리지 않는게 좋다. 안 좋은 습관임!
*/
USE analyze_db;
SELECT * FROM TB_PBTRNSP_DATA;		-- 원본 데이터
SELECT * FROM TB_PBTRNSP;			-- 변형 데이터


-- Q. 역별 승하차별로 인원수가 가장 많은 순서 조회
-- (1) 역별 승하차 인원수 구하기
SELECT STATN_NO,
	   STATN_NM,
       HO_LN,
       TKCAR_GFF_SE_CD,
       SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE NMPR_CNT > 0   -- 방어코드
GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD;

-- 승차 컬럼 이름: TK_NMPR_CNT
-- 하차 컬럼 이름: GF_NMPR_CNT
-- IF 사용한 후 그 다음 WITH AS 구문에서 MAX 사용하기
-- (2) 역별 승하차별 인원수 피벗팅
-- 1차
SELECT STATN_NO, 
	   STATN_NM,
	   HO_LN,
	   TKCAR_GFF_SE_CD,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE NMPR_CNT > 0
GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD;

-- 2차 (MAX 사용)
-- 2~3차: 인구데이터분석 파일과 동일하게, 피벗팅하는 과정
WITH TEMP_CD AS (
	SELECT STATN_NO, 
		   STATN_NM,
           HO_LN,
           TKCAR_GFF_SE_CD,
           SUM(NMPR_CNT) AS NMPR_CNT
	FROM TB_PBTRNSP
    WHERE NMPR_CNT > 0
    GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD
)
SELECT STATN_NO, STATN_NM, HO_LN,
	   IF(TKCAR_GFF_SE_CD='TK', NMPR_CNT, 0) AS TK_NMPR_CNT,
	   IF(TKCAR_GFF_SE_CD='GF', NMPR_CNT, 0) AS GF_NMPR_CNT
FROM TEMP_CD;

-- 3차 (IF 사용)
WITH TEMP_CD AS (
	SELECT STATN_NO, 
		   STATN_NM,
           HO_LN,
           TKCAR_GFF_SE_CD,
           SUM(NMPR_CNT) AS NMPR_CNT
	FROM TB_PBTRNSP
    WHERE NMPR_CNT > 0
    GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD
), TEMP_CD_PIVOT AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           IF(TKCAR_GFF_SE_CD='TK', NMPR_CNT, 0) AS TK_NMPR_CNT,
           IF(TKCAR_GFF_SE_CD='GF', NMPR_CNT, 0) AS GF_NMPR_CNT
    FROM TEMP_CD
)
SELECT STATN_NO, STATN_NM, HO_LN,
	   MAX(TK_NMPR_CNT) AS TK_NMPR_CNT,
	   MAX(GF_NMPR_CNT) AS GF_NMPR_CNT
FROM TEMP_CD_PIVOT
GROUP BY STATN_NO, STATN_NM, HO_LN;

-- (2) 역별 승하차별로 인원수가 가장 많은 순서 조회
-- 전체 데이터를 대상으로 승차 1등, 승차 꼴등, 하차 1등, 하차 꼴등 구하기
-- 4차: (1)번의 3차 이어서 사용하여 승하차 오름차순 및 내림차순 조회
WITH TEMP_CD AS (
	SELECT STATN_NO, 
		   STATN_NM,
           HO_LN,
           TKCAR_GFF_SE_CD,
           SUM(NMPR_CNT) AS NMPR_CNT
	FROM TB_PBTRNSP
    WHERE NMPR_CNT > 0
    GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD
), TEMP_CD_PIVOT AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           IF(TKCAR_GFF_SE_CD='TK', NMPR_CNT, 0) AS TK_NMPR_CNT,
           IF(TKCAR_GFF_SE_CD='GF', NMPR_CNT, 0) AS GF_NMPR_CNT
    FROM TEMP_CD
), TEMP_TK_GF AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           MAX(TK_NMPR_CNT) AS TK_NMPR_CNT,
           MAX(GF_NMPR_CNT) AS GF_NMPR_CNT
    FROM TEMP_CD_PIVOT
    GROUP BY STATN_NO, STATN_NM, HO_LN
)
SELECT STATN_NO, STATN_NM, HO_LN, TK_NMPR_CNT, GF_NMPR_CNT,
	   RANK() OVER(ORDER BY TK_NMPR_CNT) AS RANK_TK_NMPR_CNT_ASC,
	   RANK() OVER(ORDER BY GF_NMPR_CNT) AS RANK_GF_NMPR_CNT_ASC,
	   RANK() OVER(ORDER BY TK_NMPR_CNT DESC) AS RANK_TK_NMPR_CNT_DESC,
	   RANK() OVER(ORDER BY GF_NMPR_CNT DESC) AS RANK_GF_NMPR_CNT_DESC
FROM TEMP_TK_GF
WHERE TK_NMPR_CNT > 0
  AND GF_NMPR_CNT > 0;

-- 5차: ASC, DESC 순위에서 WHERE절로 1만 남기기
WITH TEMP_CD AS (
	SELECT STATN_NO, 
		   STATN_NM,
           HO_LN,
           TKCAR_GFF_SE_CD,
           SUM(NMPR_CNT) AS NMPR_CNT
	FROM TB_PBTRNSP
    WHERE NMPR_CNT > 0
    GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD
), TEMP_CD_PIVOT AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           IF(TKCAR_GFF_SE_CD='TK', NMPR_CNT, 0) AS TK_NMPR_CNT,
           IF(TKCAR_GFF_SE_CD='GF', NMPR_CNT, 0) AS GF_NMPR_CNT
    FROM TEMP_CD
), TEMP_TK_GF AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           MAX(TK_NMPR_CNT) AS TK_NMPR_CNT,
           MAX(GF_NMPR_CNT) AS GF_NMPR_CNT
    FROM TEMP_CD_PIVOT
    GROUP BY STATN_NO, STATN_NM, HO_LN
), TEMP_TK_GF_RANK AS(
	SELECT STATN_NO, STATN_NM, HO_LN, TK_NMPR_CNT, GF_NMPR_CNT,
		   RANK() OVER(ORDER BY TK_NMPR_CNT) AS RANK_TK_NMPR_CNT_ASC,
           RANK() OVER(ORDER BY GF_NMPR_CNT) AS RANK_GF_NMPR_CNT_ASC,
           RANK() OVER(ORDER BY TK_NMPR_CNT DESC) AS RANK_TK_NMPR_CNT_DESC,
           RANK() OVER(ORDER BY GF_NMPR_CNT DESC) AS RANK_GF_NMPR_CNT_DESC
	FROM TEMP_TK_GF
)
SELECT STATN_NO, STATN_NM, HO_LN, TK_NMPR_CNT, GF_NMPR_CNT,
	   RANK_TK_NMPR_CNT_DESC AS 승차1등, 
       RANK_GF_NMPR_CNT_DESC AS 하차1등, 
       RANK_TK_NMPR_CNT_ASC AS 승차꼴등, 
       RANK_GF_NMPR_CNT_ASC AS 하차꼴등
FROM TEMP_TK_GF_RANK
WHERE RANK_TK_NMPR_CNT_DESC = 1 OR RANK_GF_NMPR_CNT_DESC = 1 OR RANK_TK_NMPR_CNT_ASC = 1 OR RANK_GF_NMPR_CNT_ASC = 1;

-- 6차(추가): 하차 인원이 0인 경우를 방어코드로 필터링
WITH TEMP_CD AS (
	SELECT STATN_NO, 
		   STATN_NM,
           HO_LN,
           TKCAR_GFF_SE_CD,
           SUM(NMPR_CNT) AS NMPR_CNT
	FROM TB_PBTRNSP
    WHERE NMPR_CNT > 0
    GROUP BY STATN_NO, STATN_NM, HO_LN, TKCAR_GFF_SE_CD
), TEMP_CD_PIVOT AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           IF(TKCAR_GFF_SE_CD='TK', NMPR_CNT, 0) AS TK_NMPR_CNT,
           IF(TKCAR_GFF_SE_CD='GF', NMPR_CNT, 0) AS GF_NMPR_CNT
    FROM TEMP_CD
), TEMP_TK_GF AS (
    SELECT STATN_NO, STATN_NM, HO_LN,
           MAX(TK_NMPR_CNT) AS TK_NMPR_CNT,
           MAX(GF_NMPR_CNT) AS GF_NMPR_CNT
    FROM TEMP_CD_PIVOT
    GROUP BY STATN_NO, STATN_NM, HO_LN
), TEMP_TK_GF_RANK AS(
	SELECT STATN_NO, STATN_NM, HO_LN, TK_NMPR_CNT, GF_NMPR_CNT,
		   RANK() OVER(ORDER BY TK_NMPR_CNT) AS RANK_TK_NMPR_CNT_ASC,
           RANK() OVER(ORDER BY GF_NMPR_CNT) AS RANK_GF_NMPR_CNT_ASC,
           RANK() OVER(ORDER BY TK_NMPR_CNT DESC) AS RANK_TK_NMPR_CNT_DESC,
           RANK() OVER(ORDER BY GF_NMPR_CNT DESC) AS RANK_GF_NMPR_CNT_DESC
	FROM TEMP_TK_GF
    WHERE TK_NMPR_CNT > 0
      AND GF_NMPR_CNT > 0
)
SELECT STATN_NO, STATN_NM, HO_LN, TK_NMPR_CNT, GF_NMPR_CNT,
	   RANK_TK_NMPR_CNT_DESC AS 승차1등, 
       RANK_GF_NMPR_CNT_DESC AS 하차1등, 
       RANK_TK_NMPR_CNT_ASC AS 승차꼴등, 
       RANK_GF_NMPR_CNT_ASC AS 하차꼴등
FROM TEMP_TK_GF_RANK
WHERE RANK_TK_NMPR_CNT_DESC = 1 OR RANK_GF_NMPR_CNT_DESC = 1 OR RANK_TK_NMPR_CNT_ASC = 1 OR RANK_GF_NMPR_CNT_ASC = 1;



-- Q. 출퇴근 시간대별 승하차 인원수 가장 많은 순, 적은 순 조회
-- (1) 출근 시간대 (7~8시) 하차 인원수가 가장 많은 순으로 데이터 조회
SELECT * FROM TB_PBTRNSP;
SELECT STATN_NO, STATN_NM, HO_LN,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE BEGIN_TIME = '0700'
  AND END_TIME = '0800'
  AND TKCAR_GFF_SE_CD = 'GF'
GROUP BY STATN_NO, STATN_NM, HO_LN
ORDER BY NMPR_CNT DESC;

-- (2) 출근 시간대 (7~8시) 승차 인원수가 가장 많은 순으로 데이터 조회
SELECT * FROM TB_PBTRNSP;
SELECT STATN_NO, STATN_NM, HO_LN,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE BEGIN_TIME = '0700'
  AND END_TIME = '0800'
  AND TKCAR_GFF_SE_CD = 'TK'
GROUP BY STATN_NO, STATN_NM, HO_LN
ORDER BY NMPR_CNT DESC;

-- (3) 퇴근 시간대 (18~19시) 하차 인원수가 가장 많은 순으로 데이터 조회
SELECT * FROM TB_PBTRNSP;
SELECT STATN_NO, STATN_NM, HO_LN,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE BEGIN_TIME = '1800'
  AND END_TIME = '1900'
  AND TKCAR_GFF_SE_CD = 'TK'
GROUP BY STATN_NO, STATN_NM, HO_LN
ORDER BY NMPR_CNT DESC;

-- (4) 퇴근 시간대 (18~19시) 승차 인원수가 가장 많은 순으로 데이터 조회
SELECT STATN_NO, STATN_NM, HO_LN,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE BEGIN_TIME = '1800'
  AND END_TIME = '1900'
  AND TKCAR_GFF_SE_CD = 'GF'
GROUP BY STATN_NO, STATN_NM, HO_LN
ORDER BY NMPR_CNT DESC;

-- (5) 어느 역에서 막차를 많이 타는지 (23~04시)
SELECT STATN_NO, STATN_NM, HO_LN,
	   SUM(NMPR_CNT) AS NMPR_CNT
FROM TB_PBTRNSP
WHERE (BEGIN_TIME, END_TIME) IN (('2300', '2400'),
								 ('0000', '0100'),
                                 ('0100', '0200'),
                                 ('0200', '0300'),
                                 ('0300', '0400'))
  AND TKCAR_GFF_SE_CD = 'TK'
GROUP BY STATN_NO, STATN_NM, HO_LN
ORDER BY NMPR_CNT DESC;