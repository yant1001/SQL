-- 1. 상품을 구매한 회원 비율 구하기
WITH TEMP_USER_2021 AS (
SELECT *
FROM USER_INFO
WHERE YEAR(JOINED) = 2021  -- 2021년에 가입한 회원
),
TEMP_JOIN AS (
SELECT U.USER_ID
     , JOINED
     , SALES_DATE
FROM TEMP_USER_2021 U
JOIN ONLINE_SALE S
ON U.USER_ID = S.USER_ID   -- 2021년 가입 회원의 상품 구매일
)
SELECT YEAR(SALES_DATE) AS YEAR
     , MONTH(SALES_DATE) AS MONTH
     , COUNT(DISTINCT TEMP_JOIN.USER_ID) AS PURCHASED_USERS -- 상품을 구매한 회원수
     , ROUND(COUNT(DISTINCT TEMP_JOIN.USER_ID)
            /COUNT(DISTINCT TEMP_USER_2021.USER_ID), 1) AS PURCHASED_RATIO
FROM TEMP_JOIN, TEMP_USER_2021
GROUP BY 1, 2
ORDER BY 1, 2


-- 2. 멸종위기의 대장균 찾기
-- 1003 오답 -> 재귀 사용 필요
WITH TEMP_GENERATION AS (
SELECT *
     , CASE WHEN PARENT_ID IS NULL THEN '1'
            WHEN PARENT_ID IN (SELECT ID
                               FROM ECOLI_DATA
                               WHERE PARENT_ID IS NULL) THEN '2'
            WHEN PARENT_ID IN (SELECT ID
                               FROM ECOLI_DATA
                               WHERE PARENT_ID IN (SELECT ID
                                                   FROM ECOLI_DATA
                                                   WHERE PARENT_ID IS NULL)) THEN '3'
            ELSE '4'
       END AS 'GENERATION'
FROM ECOLI_DATA
)
SELECT COUNT(*) AS COUNT
     , GENERATION
FROM TEMP_GENERATION
WHERE ID NOT IN (SELECT PARENT_ID
                 FROM TEMP_GENERATION
                 WHERE PARENT_ID IS NOT NULL)
GROUP BY GENERATION
ORDER BY GENERATION
-- 1004 재귀 사용 참고
WITH RECURSIVE CTE (GENERATION, ID) AS (
    SELECT 1
         , ID 
    FROM ECOLI_DATA 
    WHERE PARENT_ID IS NULL
    UNION ALL
    SELECT GENERATION+1
         , ECOLI_DATA.ID FROM CTE
    JOIN ECOLI_DATA
    ON ECOLI_DATA.PARENT_ID = CTE.ID
)
SELECT COUNT(ID) AS COUNT
     , GENERATION 
FROM CTE
WHERE ID NOT IN (SELECT DISTINCT PARENT_ID
                 FROM ECOLI_DATA
                 WHERE PARENT_ID IS NOT NULL)
GROUP BY GENERATION
ORDER BY GENERATION
-- 1007 각 세대별 자식이 없는 개체수와 세대를 출력
WITH RECURSIVE TEMP_GENERATION AS (  -- 세대 수 컬럼 추가
     SELECT ID
          , PARENT_ID
          , 1 GENERATION
     FROM ECOLI_DATA
     WHERE PARENT_ID IS NULL
     UNION ALL
     SELECT E.ID
          , E.PARENT_ID
          , GENERATION+1
     FROM ECOLI_DATA E
     JOIN TEMP_GENERATION T
     ON E.PARENT_ID = T.ID
),
TEMP_GENERATION2 AS (  -- 자식 개수 추가
     SELECT ID
          , PARENT_ID
          , GENERATION
          , (SELECT COUNT(*)
             FROM TEMP_GENERATION B
             WHERE A.ID = B.PARENT_ID) COUNT
     FROM TEMP_GENERATION A
)
SELECT COUNT(*) COUNT
     , GENERATION
FROM TEMP_GENERATION2
WHERE COUNT = 0
GROUP BY 2
ORDER BY 2